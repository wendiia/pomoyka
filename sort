from tkinter import *
from tkinter.ttk import Combobox


class GUI:
    def __init__(self):
        """ Инициализация главного окна"""
        self.root = Tk()
        self.root.title('Нахождение слов')
        self.root.minsize(775, 350)

        self.hat = Label(self.root, width=60, text="Выберите алгоритм нахождения:", fg="white", bg="#1E4E5C",
                         font=('Bahnschrift Condensed', 25))
        self.l_result = Label(self.root, text="Результат:", fg="#30546d", font=('Bahnschrift Condensed', 20))
        self.sort_mas = Label(self.root, fg="#30546d", font=('Bahnschrift Condensed', 20))
        self.btn_search = Button(self.root, text="Отсортировать", bg="#6db0b3", fg="#30546d",
                                 font=('Bahnschrift Condensed', 20),
                                 activebackground="#4E878D", command=self.result_search)
        self.entry_mas = Entry(self.root, fg="black", font=('Arial', 14), width=50)
        self.combobox = Combobox(self.root, values=['Пузырек', 'Слиянием', 'Быстрая', 'Шелла'], font="Arial 20",
                                 state="readonly",
                                 justify='center', width=50)

        self.fill(1)  # если еще не выбран алгоритм в комбобоксе
        self.combobox.bind("<<ComboboxSelected>>", self.fill)

    def fill(self, event):
        """ Заполнение окна виджетами"""
        self.ind_combobox = self.combobox.current()
        if event == 1:  # если еще не выбран алгоритм в комбобоксе
            self.combobox.place(x=0, y=45)
            self.hat.place(x=0, y=0)

        else:  # при выборе алгоритма появляются дополнительные виджеты
            self.entry_mas.place(x=100, y=100)
            self.btn_search.place(x=300, y=200, width=200)
            self.l_result.place(x=100, y=140)
            self.sort_mas.place(x=210, y=140)

    def result_search(self):
        """
        Происзводит соответствие с выбранным алгоритмом и выполняет поиск по выбранному алгоритму,
        выаодит результат на окно
        """
        entry_mas = self.entry_mas.get().split()
        entry_mas = [int(x) for x in entry_mas]
        self.sort_mas.config(text="")

        if len(entry_mas) == 0:
            self.sort_mas.config(text="Введите массив")

        else:
            if self.ind_combobox == 0:
                self.sort_mas.config(text=bubble_sort(entry_mas))
            elif self.ind_combobox == 1:
                self.sort_mas.config(text=merge_sort(entry_mas))
            elif self.ind_combobox == 2:
                self.sort_mas.config(text=quick_sort(entry_mas))
            elif self.ind_combobox == 3:
                self.sort_mas.config(text=shell(entry_mas))


def bubble_sort(arr):

    def swap(y, j):
        arr[y], arr[j] = arr[j], arr[y]

    n = len(arr)
    swapped = True

    x = -1
    while swapped:
        swapped = False
        x = x + 1
        for i in range(1, n - x):
            if arr[i - 1] > arr[i]:
                swap(i - 1, i)
                swapped = True
    return arr


def merge_sort(arr):
    # Последнее разделение массива
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    # Выполняем merge_sort рекурсивно с двух сторон
    left, right = merge_sort(arr[:mid]), merge_sort(arr[mid:])

    # Объединяем стороны вместе
    return merge(left, right, arr.copy())


def merge(left, right, merged):
    left_cursor, right_cursor = 0, 0
    while left_cursor < len(left) and right_cursor < len(right):

        # Сортируем каждый и помещаем в результат
        if left[left_cursor] <= right[right_cursor]:
            merged[left_cursor + right_cursor] = left[left_cursor]
            left_cursor += 1
        else:
            merged[left_cursor + right_cursor] = right[right_cursor]
            right_cursor += 1

    for left_cursor in range(left_cursor, len(left)):
        merged[left_cursor + right_cursor] = left[left_cursor]

    for right_cursor in range(right_cursor, len(right)):
        merged[left_cursor + right_cursor] = right[right_cursor]

    return merged


def partition(array, begin, end):
    pivot_idx = begin
    for i in range(begin + 1, end + 1):
        if array[i] <= array[begin]:
            pivot_idx += 1
            array[i], array[pivot_idx] = array[pivot_idx], array[i]
    array[pivot_idx], array[begin] = array[begin], array[pivot_idx]
    return pivot_idx


def quick_sort_recursion(array, begin, end):
    if begin >= end:
        return
    pivot_idx = partition(array, begin, end)
    quick_sort_recursion(array, begin, pivot_idx - 1)
    quick_sort_recursion(array, pivot_idx + 1, end)
    return array


def quick_sort(array, begin=0, end=None):
    if end is None:
        end = len(array) - 1

    return quick_sort_recursion(array, begin, end)


def shell(seq):
    inc = len(seq) // 2
    while inc:
        for i, el in enumerate(seq):
            while i >= inc and seq[i - inc] > el:
                seq[i] = seq[i - inc]
                i -= inc
            seq[i] = el
        inc = 1 if inc == 2 else int(inc * 5.0 / 11)
    return seq


a = GUI()
a.root.mainloop()


from tkinter import *
from tkinter.ttk import Combobox


class GUI:
    def __init__(self):
        """ Инициализация главного окна"""
        self.root = Tk()
        self.root.title('Нахождение слов')
        self.root.geometry("770x500+450+200")
        self.root.minsize(650, 400)

        self.text = Text(self.root, width=75, height=10, bg="white", fg='black', font=15, wrap=WORD)
        self.hat = Label(self.root, width=60, text="Выберите алгоритм нахождения:", fg="white", bg="#1E4E5C",
                         font=('Bahnschrift Condensed', 25))
        self.l_result = Label(self.root, text="Результат:", fg="#30546d", font=('Bahnschrift Condensed', 20))
        self.l_index = Label(self.root, fg="#30546d", font=('Bahnschrift Condensed', 15))
        self.btn_search = Button(self.root, text="Найти", bg="#6db0b3", fg="#30546d",
                                 font=('Bahnschrift Condensed', 20),
                                 activebackground="#4E878D", command=self.result_search)
        self.entry_word = Entry(self.root, fg="black", font=('Arial', 14), width=50)
        self.combobox = Combobox(self.root, values=['Ахо-Корасик', 'Кнут-Моррис-Пратт', 'Бойер-Мур'], font="Arial 20",
                                 state="readonly",
                                 justify='center', width=50)

        self.fill(1)  # если еще не выбран алгоритм в комбобоксе
        self.combobox.bind("<<ComboboxSelected>>", self.fill)

    def fill(self, event):
        """ Заполнение окна виджетами"""
        self.ind_combobox = self.combobox.current()
        if event == 1:  # если еще не выбран алгоритм в комбобоксе
            self.combobox.place(x=0, y=45)
            self.hat.place(x=0, y=0)

        else:  # при выборе алгоритма появляются дополнительные виджеты
            self.text.place(x=50, y=90)
            self.entry_word.place(x=100, y=320)
            self.btn_search.place(x=300, y=420, width=150)
            self.l_result.place(x=100, y=340)
            self.l_index.place(x=210, y=350)

    def result_search(self):
        """
        Происзводит соответствие с выбранным алгоритмом и выполняет поиск по выбранному алгоритму,
        выаодит результат на окно
        """
        get_text = self.text.get(0.1, END)
        self.l_index.config(text=0)

        if self.entry_word.get() == "":
            self.l_index.config(text="Введите слово")

        else:
            if self.ind_combobox == 1:
                get_entry = self.entry_word.get().split()[0]
                self.l_index.config(text=" ".join(kmp(get_text, get_entry)))
            elif self.ind_combobox == 2:
                get_entry = self.entry_word.get().split()[0]
                self.l_index.config(text=" ".join(bmh(get_text, get_entry)))
            else:
                get_entry = self.entry_word.get().split()
                self.l_index.config(text=" ".join(ahoc(get_text, get_entry)))


def ahoc(s, w):
    """ Поиск слова алгоритмом Ахо_Корасика """
    adj_list = []

    def init_trie(keywords):
        """инициализация бора и добавление слов"""
        create_empty_trie()
        add_keywords(keywords)

    def create_empty_trie():
        """создание пустого бора"""
        adj_list.append({'value': '', 'next_states': [], 'fail_state': 0, 'output': []})

    def add_keywords(keywords):
        """добавление всех слов из keywords"""
        for keyword in keywords:
            add_keyword(keyword)

    def find_next_state(current_state, value):
        for node in adj_list[current_state]["next_states"]:
            if adj_list[node]["value"] == value:
                return node
        return None

    def add_keyword(keyword):
        """добавление ключевого слова в дерево и отмечание вывода на последнем узле"""
        current_state = 0
        j = 0
        keyword = keyword.lower()
        child = find_next_state(current_state, keyword[j])
        while child is not None:
            current_state = child
            j = j + 1
            if j < len(keyword):
                child = find_next_state(current_state, keyword[j])
            else:
                break

        for i in range(j, len(keyword)):
            node = {'value': keyword[i], 'next_states': [], 'fail_state': 0, 'output': []}
            adj_list.append(node)
            adj_list[current_state]["next_states"].append(len(adj_list) - 1)
            current_state = len(adj_list) - 1
        adj_list[current_state]["output"].append(keyword)

    def get_keywords_found(line):
        """ возвращает список, содержащий индексы вхождений найденных слов"""
        line = line.lower()
        current_state = 0
        keywords_found = []

        for i in range(len(line)):
            while find_next_state(current_state, line[i]) is None and current_state != 0:
                current_state = adj_list[current_state]["fail_state"]
            current_state = find_next_state(current_state, line[i])
            if current_state is None:
                current_state = 0
            else:
                for j in adj_list[current_state]["output"]:
                    keywords_found.append(str(i - len(j) + 1))

        if len(keywords_found) == 0:
            return "Таких слов нет"

        else:
            return keywords_found

    init_trie(w)
    return get_keywords_found(s)


def kmp(s, w):
    """ Поиск слова алгоритмом Кнута-Морриса-Пратта (КМП)"""
    result = []
    n = len(s)
    m = len(w)
    p = [0] * m

    def form_p():
        """ Формирование массива p, в котором находятся длины совпадающих суффиксов относительно i-го эл. образа"""
        j = 0
        i = 1
        while i < m:
            if w[i] == w[j]:
                p[i] = j + 1
                i += 1
                j += 1
            elif j == 0:
                p[i] = 0
                i += 1
            else:
                j = p[j - 1]

    def search_kmp():
        """ Производит поиск и возвращает список с индексами вхождений найденных слов"""
        i = 0
        j = 0
        while i < n:
            if s[i] == w[j]:
                i += 1
                j += 1
                if j == m:
                    result.append(str(i - m))
                    j = 0
            else:
                if j > 0:
                    j = p[j - 1]
                else:
                    i += 1

        if len(result) == 0:
            return "Такого слова нет"
        else:
            return result

    form_p()
    return search_kmp()


def bmh(s, w):
    """ Поиск слова алгоритмом Бойера-Мура (БМХ)"""
    m = len(w)  # число символов в образе
    n = len(s)
    d = {}  # словарь смещений

    def form_offset():
        """Формирование таблицы смещений от последнего символа в боразе"""
        unic_set = set()  # уникальные символы в образе
        for x in range(m - 2, -1, -1):  # итерации с предпоследнего символа
            if w[x] not in unic_set:  # если символ еще не добавлен в таблицу
                d[w[x]] = m - x - 1
                unic_set.add(w[x])

        if w[m - 1] not in unic_set:  # отдельно формируем последний символ
            d[w[m - 1]] = m

        d['*'] = m  # смещения для прочих символов

    def search_bmh():
        """ Производит поиск и возвращает список с индексами вхождений найденных слов"""
        res = []  # для хранения индексов найденных слов
        if n >= m:
            i = m - 1  # счетчик проверяемого символа в строке
            while i < n:
                k = 0
                flag = False
                for j in range(m - 1, -1, -1):
                    if s[i - k] != w[j]:
                        if j == m - 1:
                            pos = d[s[i]] if d.get(s[i], False) else d['*']
                        else:
                            pos = d[w[j]]  # смещение, если не равен не последний символ образа
                        i += pos  # смещение счетчика строки
                        flag = True  # если несовпадение символа, то flag = True
                        break
                    k += 1  # смещение для сравниваемого символа в строке
                if not flag:  # если дошли до начала образа, значит, все его символы совпали
                    res.append(str(i - k + 1))
                    i += m
        else:
            print("Такого слова нет")

        if len(res) == 0:
            return "Такого слова нет"
        else:
            return res

    form_offset()
    return search_bmh()


a = GUI()
a.root.mainloop()
